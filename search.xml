<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>在Cent OS上搭建ftp服务</title>
      <link href="/2022/02/14/ftp%E8%84%9A%E6%9C%AC/"/>
      <url>/2022/02/14/ftp%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文整理在<code>Cent OS</code>上通过<code>vsftpd</code>快速搭建<code>ftp</code>服务！</p></blockquote><h2 id="1-yum安装vsftpd"><a href="#1-yum安装vsftpd" class="headerlink" title="1. yum安装vsftpd"></a>1. yum安装vsftpd</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install vsftpd</span><br></pre></td></tr></table></figure><p><strong>check</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start vsftpd.service</span><br></pre></td></tr></table></figure><h2 id="2-SELinux与防火墙"><a href="#2-SELinux与防火墙" class="headerlink" title="2 SELinux与防火墙"></a>2 SELinux与防火墙</h2><h3 id="设置SELinux对ftp的限制"><a href="#设置SELinux对ftp的限制" class="headerlink" title="设置SELinux对ftp的限制"></a>设置SELinux对ftp的限制</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">getsebool -a | grep ftp</span><br><span class="line">setsebool -P ftpd_full_access on</span><br></pre></td></tr></table></figure><h3 id="将ftp加入防火墙白名单"><a href="#将ftp加入防火墙白名单" class="headerlink" title="将ftp加入防火墙白名单"></a>将ftp加入防火墙白名单</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --zone=public --add-service=ftp</span><br><span class="line">firewall-cmd --reload</span><br><span class="line">firewall-cmd --list-all</span><br></pre></td></tr></table></figure><h2 id="3-修改配置文件"><a href="#3-修改配置文件" class="headerlink" title="3. 修改配置文件"></a>3. 修改配置文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/vsftpd/</span><br><span class="line">vim vsftpd.conf</span><br></pre></td></tr></table></figure><h2 id="4-创建宿主用户ftpuser"><a href="#4-创建宿主用户ftpuser" class="headerlink" title="4. 创建宿主用户ftpuser"></a>4. 创建宿主用户ftpuser</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cd /home</span><br><span class="line">mkdir vsftpd</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建用户 ftpuser 指定 `/home/vsftpd` 目录</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-s /sbin/nologin ftpuser 表示不允许该用户通过命令行方式登录</span></span><br><span class="line">useradd -g root -M -d /home/vsftpd -s /sbin/nologin ftpuser</span><br><span class="line"></span><br><span class="line">passwd ftpuser</span><br><span class="line">chown -R ftpuser.root /home/vsftpd</span><br><span class="line"></span><br><span class="line">cd /etc/vsftpd/vuser_conf</span><br></pre></td></tr></table></figure><h2 id="5-生成虚拟用户数据文件"><a href="#5-生成虚拟用户数据文件" class="headerlink" title="5. 生成虚拟用户数据文件"></a>5. 生成虚拟用户数据文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim vuser_passwd</span><br><span class="line">db_load -T -t hash -f /etc/vsftpd/vuser_passwd /etc/vsftpd/vuser_passwd.db</span><br><span class="line">chmod 600 /etc/vsftpd/vuser_passwd.db</span><br></pre></td></tr></table></figure><h4 id="查看系统位数"><a href="#查看系统位数" class="headerlink" title="查看系统位数"></a>查看系统位数</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getconf LONG_BIT</span><br></pre></td></tr></table></figure><h4 id="编辑pam认证文件"><a href="#编辑pam认证文件" class="headerlink" title="编辑pam认证文件"></a>编辑pam认证文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/pam.d/vsftpd</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将其他都注释掉，添加下面两行;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">vuser_passwd 是你生成的虚拟用户的db文件,这里不要加扩展名。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">系统为32位：</span></span><br><span class="line">auth required pam_userdb.so db=/etc/vsftpd/vuser_passwd account</span><br><span class="line">required pam_userdb.so db=/etc/vsftpd/vuser_passwd</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">系统为64位：</span></span><br><span class="line">auth required /lib64/security/pam_userdb.so db=/etc/vsftpd/vuser_passwd</span><br><span class="line">account required /lib64/security/pam_userdb.so db=/etc/vsftpd/vuser_passwd</span><br><span class="line"></span><br><span class="line">mkdir /home/vsftpd/ftp-user1</span><br><span class="line">chown -R ftpuser.root /home/vsftpd/ftp-user1</span><br><span class="line">chmod 777 /home/vsftpd/ftp-user1</span><br><span class="line">mkdir /home/vsftpd/ftp-user2</span><br><span class="line">chown -R ftpuser.root /home/vsftpd/ftp-user2</span><br><span class="line">chmod 777 /home/vsftpd/ftp-user2</span><br></pre></td></tr></table></figure><h2 id="6-创建虚拟用户配置目录"><a href="#6-创建虚拟用户配置目录" class="headerlink" title="6. 创建虚拟用户配置目录"></a>6. 创建虚拟用户配置目录</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/vsftpd/vuser_conf</span><br><span class="line">CREATE_USER=ftp-user1</span><br><span class="line">echo &quot;local_root=/home/vsftpd/$&#123;CREATE_USER&#125;</span><br><span class="line">write_enable=YES</span><br><span class="line">anon_umask=022</span><br><span class="line">anon_world_readable_only=NO</span><br><span class="line">anon_upload_enable=YES</span><br><span class="line">anon_mkdir_write_enable=YES</span><br><span class="line">anon_other_write_enable=YES&quot; &gt;&gt; /etc/vsftpd/vuser_conf/$&#123;CREATE_USER&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">写入虚拟用户名</span></span><br><span class="line">echo &quot;$&#123;CREATE_USER&#125;&quot; &gt;&gt; /etc/vsftpd/chroot_list</span><br></pre></td></tr></table></figure><h2 id="7-重启VSFTP服务"><a href="#7-重启VSFTP服务" class="headerlink" title="7. 重启VSFTP服务"></a>7. 重启VSFTP服务</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart vsftpd.service</span><br></pre></td></tr></table></figure><h2 id="PS-配置文件"><a href="#PS-配置文件" class="headerlink" title="PS 配置文件"></a>PS 配置文件</h2><p>贴出部分关键的配置文件</p><figure class="highlight shell"><figcaption><span>vsftpd.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">anonymous_enable=NO</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">允许ascii文件上传和下载</span></span><br><span class="line">ascii_upload_enable=YES</span><br><span class="line">ascii_download_enable=YES</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将用户限制在为其配置的主目录</span></span><br><span class="line">chroot_local_user=YES</span><br><span class="line">chroot_list_enable=YES</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">允许写</span></span><br><span class="line">allow_writeable_chroot=YES</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果启用了限定用户在其主目录下需要添加这个配置。</span></span><br><span class="line">allow_writeable_chroot=YES</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置启用虚拟用户功能</span></span><br><span class="line">guest_enable=YES</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">制定宿主用户名(我们后续需要为我们的系统增加该用户)</span></span><br><span class="line">guest_username=ftpuser</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">制定虚拟用户配置文件放置文件夹(需要我们自己建立)</span></span><br><span class="line">user_config_dir=/etc/vsftpd/vuser_conf</span><br><span class="line">chroot_list_file=/etc/vsftpd/chroot_list</span><br></pre></td></tr></table></figure><figure class="highlight shell"><figcaption><span>vuser_passwd</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ftp-user1</span><br><span class="line">123456</span><br><span class="line">ftp-user2</span><br><span class="line">123456</span><br></pre></td></tr></table></figure><h2 id="添加用户的脚本"><a href="#添加用户的脚本" class="headerlink" title="添加用户的脚本"></a>添加用户的脚本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">ORG_ID=$1</span><br><span class="line">PASSWORD=$2</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">chroot_list 所在</span></span><br><span class="line">CHROOT_LIST=/opt/zbbai/file_watch/chroot_list</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">虚拟用户配置文件放置文件夹</span></span><br><span class="line">user_config_dir=/opt/zbbai/file_watch/user_config_dir</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">宿主home目录</span></span><br><span class="line">HOME=/home/vsftpd</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">宿主用户名</span></span><br><span class="line">ftpuser=ftpuser</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ftp用户命名格式</span></span><br><span class="line">CREATE_USER=&quot;ftp-user$&#123;ORG_ID&#125;&quot;</span><br><span class="line"></span><br><span class="line">if [ ! $PASSWORD ]; then</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认密码</span></span><br><span class="line">    PASSWORD=123456</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">function create_ftp_user()&#123;</span><br><span class="line">    if [ -z &quot;`grep &quot;$&#123;CREATE_USER&#125;$&quot; $CHROOT_LIST`&quot; ]</span><br><span class="line">    then</span><br><span class="line">        echo &quot;$&#123;CREATE_USER&#125; 将被建立&quot;</span><br><span class="line">    else</span><br><span class="line">        echo &quot;$&#123;CREATE_USER&#125; 已存在&quot;</span><br><span class="line">        exit 1</span><br><span class="line">    fi</span><br><span class="line">    echo &quot;$&#123;CREATE_USER&#125;&quot; &gt;&gt; $CHROOT_LIST</span><br><span class="line">    echo &quot;local_root=$&#123;HOME&#125;/$&#123;CREATE_USER&#125;</span><br><span class="line">write_enable=YES</span><br><span class="line">anon_umask=022</span><br><span class="line">anon_world_readable_only=NO</span><br><span class="line">anon_upload_enable=YES</span><br><span class="line">anon_mkdir_write_enable=YES</span><br><span class="line">anon_other_write_enable=YES&quot; &gt;&gt; $&#123;user_config_dir&#125;/$&#123;CREATE_USER&#125;</span><br><span class="line">    echo &quot;$&#123;CREATE_USER&#125;&quot; &gt;&gt; $&#123;user_config_dir&#125;/vuser_passwd</span><br><span class="line">    echo &quot;$&#123;PASSWORD&#125;&quot; &gt;&gt; $&#123;user_config_dir&#125;/vuser_passwd</span><br><span class="line">    db_load -T -t hash -f $&#123;user_config_dir&#125;/vuser_passwd $&#123;user_config_dir&#125;/vuser_passwd.db</span><br><span class="line">    chmod 600 $&#123;user_config_dir&#125;/vuser_passwd.db</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function create_ftp_dir()&#123;</span><br><span class="line">    cd $HOME</span><br><span class="line">    mkdir $&#123;CREATE_USER&#125;</span><br><span class="line">    chown -R $ftpuser $HOME/$&#123;CREATE_USER&#125;/</span><br><span class="line">    chmod 777 $HOME/$&#123;CREATE_USER&#125;/</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function restart_ftp_server()&#123;</span><br><span class="line">    systemctl restart vsftpd.service</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">echo &quot;机构ID: $&#123;ORG_ID&#125;&quot;</span><br><span class="line">create_ftp_user</span><br><span class="line">echo &quot;用户: $&#123;CREATE_USER&#125;&quot;</span><br><span class="line">echo &quot;密码: $&#123;PASSWORD&#125;&quot;</span><br><span class="line">create_ftp_dir</span><br><span class="line">echo &quot;目录: $HOME/$&#123;CREATE_USER&#125;&quot;</span><br><span class="line">restart_ftp_server</span><br><span class="line">echo &quot;添加完成&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 脚本 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> ftp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql数据备份脚本</title>
      <link href="/2021/05/16/MySql%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD%E8%84%9A%E6%9C%AC/"/>
      <url>/2021/05/16/MySql%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h2 id="全量备份脚本"><a href="#全量备份脚本" class="headerlink" title="全量备份脚本"></a>全量备份脚本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mysql_backup.sh: backup mysql databases and keep newest 5 days backup.</span>  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$&#123;db_user&#125;</span> is mysql username</span>  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$&#123;db_password&#125;</span> is mysql password</span>  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$&#123;db_host&#125;</span> is mysql host</span>   </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">—————————–</span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">/root/mysql_backup.sh</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">everyday 3:00 AM execute database backup</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">0 3 * * * /root/mysql_backup.sh</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">/etc/cron.daily</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">date</span> format <span class="keyword">for</span> backup file (dd-mm-yyyy)  <span class="comment">#</span></span></span><br><span class="line">time=&quot;$(date +&quot;%Y-%m-%d&quot;)&quot;</span><br><span class="line">db_user=&quot;root&quot;</span><br><span class="line">db_password=&quot;123456&quot;</span><br><span class="line">db_host=&quot;118.190.244.203&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">备份的文件夹 末尾不加/ <span class="comment">#</span></span></span><br><span class="line">backup_dir=&quot;/home/backup/mysql&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mysql 与 mysqldump 环境 <span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mysql=<span class="string">&quot;/usr/local/mysql-5.5.33/bin/mysql&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mysqldump=<span class="string">&quot;/usr/local/mysql-5.5.33/bin/mysqldump&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mysql=<span class="string">&quot;docker exec -i mysql57 mysql&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mysqldump=<span class="string">&quot;docker exec -i mysql57 mysqldump&quot;</span></span></span><br><span class="line">mysql=&quot;/usr/bin/mysql&quot;</span><br><span class="line">mysqldump=&quot;/usr/bin/mysqldump&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">要备份的数据库名 <span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">all_db=<span class="string">&quot;<span class="subst">$($&#123;mysql&#125; -u $&#123;db_user&#125; -h $&#123;db_host&#125; -p$&#123;db_password&#125; -Bse &#x27;show databases&#x27;)</span>&quot;</span> <span class="comment">#</span></span></span><br><span class="line">all_db=&quot;ems_new</span><br><span class="line">emsdb&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">要保留的备份天数 <span class="comment">#</span></span></span><br><span class="line">backup_day=7</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">数据库备份日志文件存储的路径</span></span><br><span class="line">logfile=&quot;/var/log/mysql_backup&quot;$&#123;time&#125;&quot;.log&quot;</span><br><span class="line">ip=118.190.244.203</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##ssh端口号###</span></span></span><br><span class="line">ssh_port=1204</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##定义ssh auto key的文件###</span></span></span><br><span class="line">id_rsa=/root/auth_key/id_rsa_153.141.rsa</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##定义ssh auto username###</span></span></span><br><span class="line">id_rsa_user=rsync</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##定义要同步的远程服务器的目录路径（必须是绝对路径）###</span></span></span><br><span class="line">clientPath=&quot;/home/backup/mysql&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##定义要镜像的本地文件目录路径 源服务器（必须是绝对路径）###</span></span></span><br><span class="line">serverPath=$&#123;backup_dir&#125;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##定义生产环境的ip###</span></span></span><br><span class="line">web_ip=&quot;118.190.244.203&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##gotify服务 末尾不加/###</span></span></span><br><span class="line">gotifyServer=&quot;http://gotify.shelli.site&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##gotify token###</span></span></span><br><span class="line">gotifyToken=&quot;A5tYxPO_F9Nouu5&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">the directory <span class="keyword">for</span> story the newest backup  <span class="comment">#</span></span></span><br><span class="line">test ! -d $&#123;backup_dir&#125; &amp;&amp; mkdir -p $&#123;backup_dir&#125;</span><br><span class="line">log()</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;[ INFO ] [&quot;$(date +&#x27;%Y-%m-%d %T&#x27;)&quot;] &quot;$1 &gt;&gt;$&#123;logfile&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">备份数据库函数<span class="comment">#</span></span></span><br><span class="line">mysql_backup()</span><br><span class="line">&#123;</span><br><span class="line">    # 取所有的数据库名 #</span><br><span class="line">    for db in $&#123;all_db&#125;</span><br><span class="line">    do</span><br><span class="line">        backname=$&#123;db&#125;.$&#123;time&#125;</span><br><span class="line">        dumpfile=$&#123;backup_dir&#125;&quot;/&quot;$&#123;backname&#125;</span><br><span class="line">        </span><br><span class="line">        #将备份的时间、数据库名存入日志</span><br><span class="line">        log &quot;database &quot;$&#123;db&#125;&quot; backup&quot;</span><br><span class="line">        $&#123;mysqldump&#125; -F -u$&#123;db_user&#125; -h$&#123;db_host&#125; -p$&#123;db_password&#125; $&#123;db&#125; &gt; $&#123;dumpfile&#125;.sql 2&gt;&gt;$&#123;logfile&#125; 2&gt;&amp;1</span><br><span class="line">        </span><br><span class="line">        #开始将压缩数据日志写入log</span><br><span class="line">        log &quot;zip $&#123;dumpfile&#125;.sql&quot;</span><br><span class="line">        #将备份数据库文件库压成ZIP文件，并删除先前的SQL文件. #</span><br><span class="line">        tar -czvf $&#123;backname&#125;.tar.gz $&#123;backname&#125;.sql 2&gt;&amp;1 &amp;&amp; rm $&#123;dumpfile&#125;.sql 2&gt;&gt;$&#123;logfile&#125; 2&gt;&amp;1 </span><br><span class="line">        </span><br><span class="line">        #将压缩后的文件名存入日志。</span><br><span class="line">        log &quot;backup file name:&quot;$&#123;dumpfile&#125;&quot;.tar.gz&quot;</span><br><span class="line">        log &quot;Ending database &quot;$&#123;db&#125;&quot; backup&quot;</span><br><span class="line">    done</span><br><span class="line">&#125;</span><br><span class="line">delete_old_backup()</span><br><span class="line">&#123;    </span><br><span class="line">    log &quot;delete backup file:&quot;</span><br><span class="line">    # 删除旧的备份 查找出当前目录下七天前生成的文件，并将之删除</span><br><span class="line">    find $&#123;backup_dir&#125; -type f -mtime +$&#123;backup_day&#125; | tee delete_list.log | xargs rm -rf</span><br><span class="line">    cat delete_list.log &gt;&gt;$&#123;logfile&#125;</span><br><span class="line">&#125;</span><br><span class="line">rsync_mysql_backup()</span><br><span class="line">&#123;</span><br><span class="line">    # rsync 同步到其他Server中 #</span><br><span class="line">    for j in $&#123;web_ip&#125;</span><br><span class="line">    do                </span><br><span class="line">        log &quot;mysql_backup_rsync to $&#123;j&#125; begin &quot;</span><br><span class="line">        ### 同步 ###</span><br><span class="line">        rsync -avz --progress --delete $serverPath -e &quot;ssh -p &quot;$&#123;ssh_port&#125;&quot; -i &quot;$&#123;id_rsa&#125; $&#123;id_rsa_user&#125;@$&#123;j&#125;:$clientPath &gt;&gt;$&#123;logfile&#125; 2&gt;&amp;1 </span><br><span class="line">        log &quot;mysql_backup_rsync to $&#123;j&#125; done&quot;</span><br><span class="line">    done</span><br><span class="line">&#125;</span><br><span class="line">push()</span><br><span class="line">&#123;</span><br><span class="line">    message=$2</span><br><span class="line">    curl -X POST \</span><br><span class="line">            -H  &quot;Content-Type:application/json&quot; \</span><br><span class="line">            --data-binary &quot;&#123;\&quot;title\&quot;:\&quot;$1($&#123;ip&#125;)\&quot;,\&quot;message\&quot;:\&quot;$&#123;message&#125;\&quot;,\&quot;priority\&quot;:1,\&quot;extras\&quot;:&#123;\&quot;client::display\&quot;:&#123;\&quot;contentType\&quot;:\&quot;text/markdown\&quot;&#125;&#125;&#125;&quot; \</span><br><span class="line">            &quot;$&#123;gotifyServer&#125;/message?token=$&#123;gotifyToken&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">进入数据库备份文件目录</span></span><br><span class="line">cd $&#123;backup_dir&#125;</span><br><span class="line">mysql_backup &amp;&amp; delete_old_backup 2&gt; &quot;error&quot;$&#123;time&#125;&quot;.log&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">rsync_mysql_backup</span></span><br><span class="line">if [ &quot;$?&quot; -ne &quot;0&quot; ]; then</span><br><span class="line">   push &quot;任务执行失败&quot; &quot;**于$&#123;time&#125;备份失败。\n**\`\`\`\n日志:$&#123;backup_dir&#125;/error&quot;$&#123;time&#125;&quot;.log\n\`\`\`&quot;</span><br><span class="line">   exit 1</span><br><span class="line">fi</span><br><span class="line">log &quot;mysql backup &amp;&amp; rsync done!&quot;</span><br><span class="line">echo -e &quot;\n&quot; &gt;&gt;$&#123;logfile&#125;</span><br><span class="line">cat $&#123;logfile&#125;</span><br><span class="line">push &quot;任务执行成功&quot; &quot;**于$&#123;time&#125;备份成功。**\n\`\`\`\n日志:$&#123;logfile&#125;\n备份文件夹:$&#123;backup_dir&#125;\n\`\`\`&quot;</span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure><h2 id="增量备份脚本"><a href="#增量备份脚本" class="headerlink" title="增量备份脚本"></a>增量备份脚本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">增量备份</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Program</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">use <span class="built_in">cp</span> to backup mysql data everyday!</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">History</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Path</span></span><br><span class="line">BakDir=/home/mysql/backup/daily         //增量备份时复制mysql-bin.00000*的目标目录，提前手动创建这个目录</span><br><span class="line">BinDir=/home/mysql/data                 //mysql的数据目录</span><br><span class="line">LogFile=/home/mysql/backup/bak.log</span><br><span class="line">BinFile=/home/mysql/data/mysql-bin.index     //mysql的index文件路径，放在数据目录下的</span><br><span class="line">/usr/local/mysql/bin/mysqladmin -uroot -p123456 flush-logs</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">这个是用于产生新的mysql-bin.00000*文件</span></span><br><span class="line">Counter=`wc -l $BinFile |awk &#x27;&#123;print $1&#125;&#x27;`</span><br><span class="line">NextNum=0</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">这个<span class="keyword">for</span>循环用于比对<span class="variable">$Counter</span>,<span class="variable">$NextNum</span>这两个值来确定文件是不是存在或最新的</span></span><br><span class="line">for file in `cat $BinFile`</span><br><span class="line">do</span><br><span class="line">  base=`basename $file`</span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash"><span class="built_in">basename</span>用于截取mysql-bin.00000*文件名，去掉./mysql-bin.000005前面的./</span></span><br><span class="line">  NextNum=`expr $NextNum + 1`</span><br><span class="line">  if [ $NextNum -eq $Counter ]</span><br><span class="line">  then</span><br><span class="line">    echo $base skip! &gt;&gt; $LogFile</span><br><span class="line">  else</span><br><span class="line">    dest=$BakDir/$base</span><br><span class="line">    if(test -e $dest)</span><br><span class="line"><span class="meta prompt_">   #</span><span class="language-bash"><span class="built_in">test</span> -e用于检测目标文件是否存在，存在就写exist!到<span class="variable">$LogFile</span>去</span></span><br><span class="line">    then</span><br><span class="line">      echo $base exist! &gt;&gt; $LogFile</span><br><span class="line">    else</span><br><span class="line">      cp $BinDir/$base $BakDir</span><br><span class="line">      echo $base copying &gt;&gt; $LogFile</span><br><span class="line">    fi</span><br><span class="line">  fi</span><br><span class="line">done</span><br><span class="line">echo `date +&quot;%Y年%m月%d日 %H:%M:%S&quot;` $Next Bakup succ! &gt;&gt; $LogFile</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 脚本 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
            <tag> Linux </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java服务启动脚本</title>
      <link href="/2021/01/06/Java%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/"/>
      <url>/2021/01/06/Java%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<blockquote><p>对<code>jar</code>包的启动、停止。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">OPERATE=$1</span><br><span class="line">APP_NAME=$2</span><br><span class="line">SYSTEM=`uname`</span><br><span class="line">RUNNING=&quot;false&quot;;</span><br><span class="line">FILE_PATH=$&#123;APP_NAME&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">处理相对路径</span></span><br><span class="line">if [ $&#123;FILE_PATH:0:1&#125; != &quot;/&quot; ]; then</span><br><span class="line">    FILE_PATH=&quot;`pwd`/$&#123;FILE_PATH&#125;&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查应用是否在运行</span></span><br><span class="line">function check() &#123;</span><br><span class="line">    echo &quot;check $&#123;FILE_PATH&#125; running status...&quot;</span><br><span class="line">    if [ &quot;$&#123;SYSTEM&#125;&quot; == &#x27;Linux&#x27; ]; then</span><br><span class="line">        tpid=`ps -ef|grep -n &quot; java.* $&#123;FILE_PATH&#125;&quot;|grep -v grep|grep -v kill|awk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">    else</span><br><span class="line">        tpid=`ps -ef|grep -n &quot; java.* $&#123;FILE_PATH&#125;&quot;|grep -v grep|grep -v kill|awk &#x27;&#123;print $3&#125;&#x27;`</span><br><span class="line">    fi</span><br><span class="line">    if [ $&#123;tpid&#125; ]; then</span><br><span class="line">        echo &quot;App $&#123;FILE_PATH&#125; is running.&quot;</span><br><span class="line">        RUNNING=&quot;true&quot;</span><br><span class="line">    else</span><br><span class="line">        echo &quot;App $&#123;FILE_PATH&#125; is NOT running.&quot;</span><br><span class="line">        RUNNING=&quot;false&quot;</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动程序</span></span><br><span class="line">function start() &#123;</span><br><span class="line">    # 用文件名作为 APP_NAME</span><br><span class="line">    APP_NAME=$&#123;FILE_PATH##*/&#125;</span><br><span class="line">    APP_NAME=$&#123;APP_NAME%%.*&#125;</span><br><span class="line">    # 检查是否已经存在</span><br><span class="line">    check</span><br><span class="line">    if [ $&#123;RUNNING&#125; == &quot;true&quot; ]; then</span><br><span class="line">        echo &quot;App already running!&quot;</span><br><span class="line">    else</span><br><span class="line">        echo &quot;start...&quot;</span><br><span class="line">        nohup java -jar -Dconfiguration.loggers.root.level=debug $&#123;FILE_PATH&#125; --name=$&#123;APP_NAME&#125; --spring.profiles.active=prod --server.port=8991 &gt; /dev/null 2&gt;&amp;1 &amp;</span><br><span class="line">        check</span><br><span class="line">        echo &quot;Start success!&quot;</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止程序</span></span><br><span class="line">function stop() &#123;</span><br><span class="line">    if [ $&#123;SYSTEM&#125; == &#x27;Linux&#x27; ]; then</span><br><span class="line">        tpid=`ps -ef|grep -n &quot; java.* $&#123;FILE_PATH&#125;&quot;|grep -v grep|grep -v kill|awk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">    else</span><br><span class="line">        tpid=`ps -ef|grep -n &quot; java.* $&#123;FILE_PATH&#125;&quot;|grep -v grep|grep -v kill|awk &#x27;&#123;print $3&#125;&#x27;`</span><br><span class="line">    fi</span><br><span class="line">    if [ $&#123;tpid&#125; ]; then</span><br><span class="line">        echo &#x27;Stop Process...&#x27;</span><br><span class="line">        kill -15 $&#123;tpid&#125;</span><br><span class="line">        # 检查程序是否停止成功</span><br><span class="line">        for ((i=0; i&lt;10; ++i))  </span><br><span class="line">        do  </span><br><span class="line">            sleep 1</span><br><span class="line">            if [ $&#123;SYSTEM&#125; == &#x27;Linux&#x27; ]; then</span><br><span class="line">                tpid=`ps -ef|grep -n &quot; java.* $&#123;FILE_PATH&#125;&quot;|grep -v grep|grep -v kill|awk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">            else</span><br><span class="line">                tpid=`ps -ef|grep -n &quot; java.* $&#123;FILE_PATH&#125;&quot;|grep -v grep|grep -v kill|awk &#x27;&#123;print $3&#125;&#x27;`</span><br><span class="line">            fi</span><br><span class="line">            if [ $&#123;tpid&#125; ]; then</span><br><span class="line">                echo -e &quot;.\c&quot;</span><br><span class="line">            else</span><br><span class="line">                echo &#x27;Stop Success!&#x27;</span><br><span class="line">                break;</span><br><span class="line">            fi</span><br><span class="line">        done</span><br><span class="line">        # 强制杀死进程</span><br><span class="line">        if [ $&#123;SYSTEM&#125; == &#x27;Linux&#x27; ]; then</span><br><span class="line">            tpid=`ps -ef|grep -n &quot; java.* $&#123;FILE_PATH&#125;&quot;|grep -v grep|grep -v kill|awk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">        else</span><br><span class="line">            tpid=`ps -ef|grep -n &quot; java.* $&#123;FILE_PATH&#125;&quot;|grep -v grep|grep -v kill|awk &#x27;&#123;print $3&#125;&#x27;`</span><br><span class="line">        fi</span><br><span class="line">        if [ $&#123;tpid&#125; ]; then</span><br><span class="line">            echo &#x27;Kill Process!&#x27;</span><br><span class="line">            kill -9 $&#123;tpid&#125;</span><br><span class="line">        fi</span><br><span class="line">    else</span><br><span class="line">        echo &#x27;App already stop!&#x27;</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line">function list () &#123;</span><br><span class="line">    if [ $&#123;APP_NAME&#125; == &quot;all&quot; ]; then</span><br><span class="line">        if [ $&#123;SYSTEM&#125; == &#x27;Linux&#x27; ]; then</span><br><span class="line">            ps -ef | grep -n &quot;java.*--name=&quot;|grep -v grep|grep -v kill|awk &#x27;&#123;printf $2&quot;\t&quot;$8&quot;\t&quot;&#125; &#123;split($11,b,&quot;=&quot;);print b[2]&#125;&#x27;</span><br><span class="line">            res=`ps -ef | grep -n &quot;java.*--name=&quot;|grep -v grep|grep -v kill|awk &#x27;&#123;printf $2&quot;\t&quot;$8&quot;\t&quot;&#125; &#123;split($11,b,&quot;=&quot;);print b[2]&#125;&#x27; `</span><br><span class="line">        else</span><br><span class="line">            ps -ef | grep -n &quot;java.*--name=&quot;|grep -v grep|grep -v kill|awk &#x27;&#123;printf $3&quot;\t&quot;$9&quot;\t&quot;&#125; &#123;split($12,b,&quot;=&quot;);print b[2]&#125;&#x27;</span><br><span class="line">            res=`ps -ef | grep -n &quot;java.*--name=&quot;|grep -v grep|grep -v kill|awk &#x27;&#123;printf $3&quot;\t&quot;$9&quot;\t&quot;&#125; &#123;split($12,b,&quot;=&quot;);print b[2]&#125;&#x27; `</span><br><span class="line">        fi</span><br><span class="line">    else</span><br><span class="line">        if [ $&#123;SYSTEM&#125; == &#x27;Linux&#x27; ]; then</span><br><span class="line">            ps -ef | grep -n &quot;java.*--name=$&#123;APP_NAME&#125;$&quot;|grep -v grep|grep -v kill|awk &#x27;&#123;printf $2&quot;\t&quot;$8&quot;\t&quot;&#125; &#123;split($11,b,&quot;=&quot;);print b[2]&#125;&#x27;</span><br><span class="line">            res=`ps -ef | grep -n &quot;java.*--name=$&#123;APP_NAME&#125;$&quot;|grep -v grep|grep -v kill|awk &#x27;&#123;printf $2&quot;\t&quot;$8&quot;\t&quot;&#125; &#123;split($11,b,&quot;=&quot;);print b[2]&#125;&#x27; `</span><br><span class="line">        else</span><br><span class="line">            ps -ef | grep -n &quot;java.*--name=$&#123;APP_NAME&#125;$&quot;|grep -v grep|grep -v kill|awk &#x27;&#123;printf $3&quot;\t&quot;$9&quot;\t&quot;&#125; &#123;split($12,b,&quot;=&quot;);print b[2]&#125;&#x27;</span><br><span class="line">            res=`ps -ef | grep -n &quot;java.*--name=$&#123;APP_NAME&#125;$&quot;|grep -v grep|grep -v kill|awk &#x27;&#123;printf $3&quot;\t&quot;$9&quot;\t&quot;&#125; &#123;split($12,b,&quot;=&quot;);print b[2]&#125;&#x27; `</span><br><span class="line">        fi</span><br><span class="line">    fi</span><br><span class="line">    if [ -z &quot;$res&quot; ]; then</span><br><span class="line">        echo &quot;None app running!&quot;</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">参数检查</span></span><br><span class="line">if [ -z $&#123;OPERATE&#125; ] || [ -z $&#123;APP_NAME&#125; ];then</span><br><span class="line">    if [ -z $&#123;OPERATE&#125; ];</span><br><span class="line">        then</span><br><span class="line">            echo &quot;OPERATE can not be null.&quot;</span><br><span class="line">        else</span><br><span class="line">            echo &quot;APP_NAME can not be null.&quot;</span><br><span class="line">    fi</span><br><span class="line">else</span><br><span class="line">    # 启动程序</span><br><span class="line">    if [ $&#123;OPERATE&#125; == &quot;start&quot; ]; then</span><br><span class="line">        start</span><br><span class="line">    # 停止程序</span><br><span class="line">    elif [ $&#123;OPERATE&#125; == &quot;stop&quot; ]; then</span><br><span class="line">        stop</span><br><span class="line">    # 重启程序</span><br><span class="line">    elif [ $&#123;OPERATE&#125; == &quot;restart&quot; ]; then</span><br><span class="line">        stop</span><br><span class="line">        start</span><br><span class="line">    # 检查查询运行状态</span><br><span class="line">    elif [ $&#123;OPERATE&#125; == &quot;check&quot; ]; then</span><br><span class="line">        check</span><br><span class="line">    # 查询所有项目</span><br><span class="line">    elif [ $&#123;OPERATE&#125; == &quot;list&quot; ]; then</span><br><span class="line">        list</span><br><span class="line">    else</span><br><span class="line">        echo &quot;Not supported the OPERATE.&quot;</span><br><span class="line">    fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 脚本 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql事务&amp;锁</title>
      <link href="/2019/12/08/MySql%E4%BA%8B%E5%8A%A1&amp;%E9%94%81/"/>
      <url>/2019/12/08/MySql%E4%BA%8B%E5%8A%A1&amp;%E9%94%81/</url>
      
        <content type="html"><![CDATA[<h2 id="事务的特点"><a href="#事务的特点" class="headerlink" title="事务的特点"></a>事务的特点</h2><ul><li><code>原子性（Atomicity）</code>生物钟所有操作作为一个整体像原子一样不可分割，要么全部成功，要么全部失败。</li><li><code>一致性（Consistency）</code>事务的执行结果必须从数据库的一个一致性状态到另一个一致性状态。<blockquote><p>一致性状态是指：</p><ol><li>系统的状态满足数据的完整性约束（主码，参照完整性，check约束等）</li><li>系统的状态反应数据库本应描述的现实世界的真实状态，比如转账前后两个账户的金额总和应该保持不变。</li></ol></blockquote></li><li><code>隔离性（Isolation）</code>并发执行的事务不会相互影响，其对数据库的影响和他们串行执行时一样。比如多个用户同时往一个账户转账，最后账户的结果应该和他们按先后次序转账的结果一样。</li><li><code>持久性（Durability）</code>事务一旦提交，其对数据库的更新就是持久的。任何事务或系统故障都不会导致数据丢失。</li></ul><hr><ul><li>在事务的四个特点中，一致性时事务的根本追求，而在某些情况下会对事务的一致性造成破坏：<ul><li>事务的并发执行</li><li>事务故障或系统故障</li></ul></li><li>数据库系统通过并发控制技术和日志恢复技术来避免这种情况的发生<ul><li>并发控制技术保证的事务的隔离性，使数据库的一致性状态不会因为并发执行的操作被破坏。</li><li>日志恢复技术保证了事务的原子性，使一致性状态不会因为事务或系统故障被破坏。同时使已提交的对数据库的修改不会因为系统崩溃而丢失，保证了事务的持久行。<!-- 事务 --></li></ul></li></ul><pre class="mermaid">graph LRA[事务] --> B[隔离性]A[事务] --> C[一致性]A[事务] --> D[原子性]A[事务] --> E[持久性]B[隔离性] --> F[并发控制]C[一致性] --> F[并发控制]C[一致性] --> G[日志恢复]D[原子性] --> G[日志恢复]E[持久性] --> G[日志恢复]</pre><h2 id="事务的实现原理"><a href="#事务的实现原理" class="headerlink" title="事务的实现原理"></a>事务的实现原理</h2><ul><li>事务的原子性是通过 undo log 来实现的</li><li>事务的持久性是通过 redo log 来实现的</li><li>事务的隔离性是通过 （读写锁 + MVCC） 来实现的</li><li>事务的一致性是通过 原子性、持久性、隔离性 来实现的</li></ul><p><strong>原子性实现原理逻辑日志（Undo Log）</strong></p><ul><li>Undo Log是为了实现事务的原子性，在MySql数据库InnoDB存储引擎中，Undo Log是来实现多版本并发控制（简称：MVCC）</li><li>在操作任何数据之前，首先将数据备份到一个地方（这个存储数据备份的地方称为Undo Log）。然后进行数据的修改。如果出现了错误或者用户执行了ROLLBACK语句，系统可以利用Undo Log中的备份将数据恢复到事务开始之前的状态</li></ul><p><strong>持久性实现原理（Redo Log）</strong></p><ul><li>和Undo Log相反，Redo Log记录的是新数据的备份。在事务提交前，只要将Redo Log持久化即可，不需要将数据持久化。当系统崩溃时，虽然数据没有持久化，但是Redo Log已经持久化。系统可以根据Redo Log的内容，将所有数据恢复到最新的状态</li></ul><h2 id="MySql的隔离级别"><a href="#MySql的隔离级别" class="headerlink" title="MySql的隔离级别"></a>MySql的隔离级别</h2><ul><li>事务具有隔离性，理论上来说事务之间的执行不应该相互影响，其对数据库的影响应该和他们串行执行时一样。</li><li>然而完全的隔离级别会导致系统并发性能很低，降低对资源的利用率，因而实际商队隔离性的要求会有所放宽，这也会一定程度造成对数据库一致性要求降低</li><li>SQL标准为事务定义了不同的隔离级别，从低到高依次是<ul><li>读未提交（READ UNCOMMITTED）：对事物处理的读取没有任何限制，不推荐</li><li>读已提交（READ COMMITTED）</li><li>可重复读（PEPEATABLE READ）</li><li>串行化（SERIALLZABLE）<br>不同的隔离级别可能导致不同的并发异常</li></ul></li></ul><table><thead><tr><th align="center">事务的隔离级别</th><th align="center">脏读</th><th align="center">不可重复读</th><th align="center">幻读</th></tr></thead><tbody><tr><td align="center">读未提交（READ UNCOMMITTED）</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">读已提交（READ COMMITTED）</td><td align="center">√</td><td align="center">√</td><td align="center"></td></tr><tr><td align="center">可重复读（PEPEATABLE READ）</td><td align="center"></td><td align="center"></td><td align="center">√</td></tr><tr><td align="center">串行化（SERIALLZABLE）</td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h3 id="隔离性实现原理：锁"><a href="#隔离性实现原理：锁" class="headerlink" title="隔离性实现原理：锁"></a>隔离性实现原理：锁</h3><ol><li><p>在MySql中，锁可以分为两类：</p><ul><li><p>共享锁：共享锁定是将对象数据变为只读形式，不能进行更新，所以也称为读取锁定；</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span> lock <span class="keyword">in</span> share mode;</span><br></pre></td></tr></table></figure></li><li><p>排他锁：排他锁是当执行INSERT&#x2F;UPDATE&#x2F;DELETE的时候，其他事务不呢个读取该数据，因此也称为写入锁定；</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br></pre></td></tr></table></figure></li><li><p>意向共享锁（IS）和意向排他锁（IX）：获取共享锁或排他锁之前事务必须先获取意向共享锁（IS）或意向排他锁（IX）。[意向锁是InnoDB数据库操作之前自动加的，不需要用户干预]</p></li><li><p>自增锁：针对自增列自增长的一个特殊的表级别锁</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;innodb_autoinc_lock_mode&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>锁的粒度：锁定对象的大小是锁的粒度</p><ul><li>记录</li><li>表</li><li>数据库</li></ul></li></ol><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p>多个事务持有锁并相互循环等待其他事物的锁导致所有的事务都无法继续执行</p><p><strong>其他实现并发控制的策略</strong></p><ul><li>基于时间戳的并发控制</li><li>基于有效性检查的并发控制</li><li>基于快照隔离的并发控制</li></ul><h2 id="故障恢复"><a href="#故障恢复" class="headerlink" title="故障恢复"></a>故障恢复</h2><ul><li>撤销事务undo：将事务更新的所有数据项恢复为日志中的旧值。</li><li>重做事务redo：将事务更新的所有数据项恢复为日志中的新值。</li><li>事务正常回滚&#x2F;因事务故障中止将进行redo</li><li>系统从崩溃中恢复时将先进行redo再进行undo</li></ul>]]></content>
      
      
      <categories>
          
          <category> MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
            <tag> 事务 </tag>
            
            <tag> 数据库锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础</title>
      <link href="/2018/12/07/Java%E5%9F%BA%E7%A1%80/"/>
      <url>/2018/12/07/Java%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="基础整理（一）"><a href="#基础整理（一）" class="headerlink" title="基础整理（一）"></a>基础整理（一）</h1><h2 id="1-类和对象"><a href="#1-类和对象" class="headerlink" title="1 类和对象"></a>1 类和对象</h2><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><blockquote><p>对象是类的一个实例，有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。</p></blockquote><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><blockquote><p>类是一个模板，它描述一类对象的行为和状态。</p></blockquote><h2 id="2-基本特征"><a href="#2-基本特征" class="headerlink" title="2 基本特征"></a>2 基本特征</h2><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><blockquote><p>多态是允许你将父对象设置成为一个或更多的他的子对象相等的技术，赋值之后，父对象就可以根据当前赋值给它的子对象的特性以不同的方式运作。</p></blockquote><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Parent</span> <span class="comment">//父类接口</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">simpleCall</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Child_A</span> <span class="keyword">implements</span> <span class="title class_">Parent</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">simpleCall</span><span class="params">()</span>;</span><br><span class="line">     &#123;</span><br><span class="line">     <span class="comment">//具体的实现细节；</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Child_B</span> <span class="keyword">implements</span> <span class="title class_">Parent</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">simpleCall</span><span class="params">()</span>;</span><br><span class="line">     &#123;</span><br><span class="line">     <span class="comment">//具体的实现细节；</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，我们就可以看到多态所展示的特性了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Parent</span> <span class="variable">pa</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Child_A</span>();</span><br></pre></td></tr></table></figure><p><code>pa.simpleCall()</code>则显然是调用Child_A的方法；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Parent</span> <span class="variable">pa</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Child_B</span>();</span><br></pre></td></tr></table></figure><p><code>pa.simpleCall()</code>则是在调用<code>Child_B</code>的方法。所以，我们对于抽象的父类或者接口给出了我们的具体实现后，<code>pa</code> 可以完全不用管实现的细节，只访问我们定义的方法，就可以了。</p><p>事实上，这就是多态所起的作用，可以实现<a href="https://baike.baidu.com/item/%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC">控制反转</a>。这在大量的J2EE<a href="https://baike.baidu.com/item/%E8%BD%BB%E9%87%8F%E7%BA%A7%E6%A1%86%E6%9E%B6">轻量级框架</a>中被用到，比如<a href="https://baike.baidu.com/item/Spring/85061">Spring</a>的依赖注入机制。</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><blockquote><p>继承可以使得子类具有父类的属性和方法或者重新定义、追加属性和方法等。</p></blockquote><p>用<code>extends</code>关键字来继承父类。</p><ol><li>子类拥有父类得特征，而父类没有，父类更通用，子类更具体，（特征包括属性和方法，自身的特性，拥有父类没有的）</li><li>使用<code>extends</code>继承父类，语句格式：<code>class 子类名 extends 父类名&#123;&#125;</code></li><li>父类中一般只定义一般属性和方法（这个一般可以理解为是子类共有的，这就是父类更通用，而子类拥有其他的，所以子类更具体）</li><li>子类中通过<code>super</code>关键字来调用父&#x3D;&#x3D;构造方法&#x3D;&#x3D;</li><li>在子类中可以继承父类得那些东西，&#x3D;&#x3D;哪些不可以继承?&#x3D;&#x3D;<br>父类中<code>public</code>，<code>protected</code>修饰的属性，方法可以继承，&#x3D;&#x3D;<code>private</code>修饰的属性和方法不能被继承&#x3D;&#x3D;</li><li>规则： 创建子类对象的时候，首先调用的是父类的无参构造方法创建一个父类对象</li><li>可以在子类中显示调用父类的有参构造方法</li><li>如果父类的属性均为private修饰，则可以通过共有(<code>public</code>)的<code>getter</code>，<code>setter</code>方法来调用</li><li>可以利用接口来实现与多重继承相似的效果。</li></ol><p>关键词：<code>extends</code></p><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><blockquote><p>在面向对象程式设计方法中，封装（英语：Encapsulation）是&#x3D;&#x3D;指一种将抽象性函式接口的实现细节部份包装、隐藏起来的方法。<br>&#x3D;&#x3D;封装可以被认为是一个&#x3D;&#x3D;保护屏障&#x3D;&#x3D;，&#x3D;&#x3D;防止该类的代码和数据被外部类定义的代码随机访问。&#x3D;&#x3D;<br>要访问该类的代码和数据，必须通过严格的接口控制。<br>封装最主要的功能在于我们能修改自己的实现代码，而不用修改那些调用我们代码的程序片段。<br>适当的封装可以让程式码更容易理解与维护，也加强了程式码的安全性。</p></blockquote><p>优点：</p><ol><li>良好的封装能够减少&#x3D;&#x3D;耦合&#x3D;&#x3D;。</li><li>类内部的结构可以自由修改。</li><li>可以对成员变量进行更精确的控制。</li><li>隐藏信息，实现细节</li></ol><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//采用 this 关键字是为了解决实例变量（private String name）和局部变量（setName(String name)中的name变量）之间发生的同名的冲突。</span></span><br></pre></td></tr></table></figure><p><code>name</code>和 <code>age</code> 属性设置为私有的<code>(private)</code>，只能本类才能访问，其他类都访问不了，如此就对信息进行了隐藏如果要访问就要通过公共的方法<code>(public)</code></p><p>关键词：<code>private</code></p><h2 id="3-实例和方法"><a href="#3-实例和方法" class="headerlink" title="3 实例和方法"></a>3 实例和方法</h2><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><blockquote><p>对象就是类的实例。</p></blockquote><p>创建对象实例的四种方式</p><ol><li>使用<code>new</code>关键字</li><li>利用<code>java</code>的反射机制</li><li>实现<code>Cloneable</code>接口使用克隆方法</li><li>利用<code>java</code>序列化和反序列化实现创建对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.<span class="keyword">module</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span>&#123;</span><br><span class="line"><span class="keyword">private</span> String userName;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"><span class="keyword">private</span> String addr;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String u,<span class="type">int</span> a,String addr)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.userName = u;</span><br><span class="line"><span class="built_in">this</span>.age = a;</span><br><span class="line"><span class="built_in">this</span>.addr = addr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getUserName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> userName;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserName</span><span class="params">(String userName)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.userName = userName;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getAddr</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> addr;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddr</span><span class="params">(String addr)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.addr = addr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;User [userName=&quot;</span> + userName + <span class="string">&quot;, age=&quot;</span> + age + <span class="string">&quot;, addr=&quot;</span> + addr + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//创建对象方式1:使用new关键字</span></span><br><span class="line"><span class="type">User</span> <span class="variable">u1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;1&quot;</span>,<span class="number">2</span>,<span class="string">&quot;3&quot;</span>);</span><br><span class="line">System.err.println(u1.toString());</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建对象方式2:使用反射</span></span><br><span class="line"><span class="comment">//发射方式创建对象要求被创建的对象编写空构造</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">User</span> <span class="variable">u2</span> <span class="operator">=</span> User.class.newInstance();</span><br><span class="line">System.err.println(u2.toString());</span><br><span class="line">&#125; <span class="keyword">catch</span> (InstantiationException | IllegalAccessException e) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;反射创建失败&quot;</span>+e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用clone方法创建对象:要求被创建或者被克隆的对象实现Cloneable接口</span></span><br><span class="line"><span class="comment">//(3)是在内存上对已有对象的影印，所以不会调用构造函数 </span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">User</span> <span class="variable">u3</span> <span class="operator">=</span> (User) u1.clone();</span><br><span class="line">System.err.println(<span class="string">&quot;u3:&quot;</span>+u3.toString());</span><br><span class="line">System.out.println(u1==u3);<span class="comment">//false</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;克隆创建失败&quot;</span>+e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运用反序列化手段，调用java.io.ObjectInputStream对象的 readObject()方法</span></span><br><span class="line"><span class="comment">//该方法是从文件中还原类的对象，也不会调用构造函数。</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键词：<code>new</code>，<code>clone()</code></p><h3 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h3><ol><li>抽象类不能被实例化</li><li>抽象类中不一定包含抽象方法，但是有抽象方法的类必定是抽象类。</li><li>抽象类中的抽象方法只是声明，不包含实现过程</li><li>构造方法，类方法（用<code>static</code>修饰的方法）不能声明为抽象方法。</li><li>抽象类的子类必须给出抽象类中的抽象方法的具体实现，除非该子类也是抽象类。</li></ol><p><strong>例</strong>：问：子抽象类继承父抽象类，必须显性调用父抽象类的显性构造器吗？</p><p>并不是说“<strong>一定要调用父类的显性构造器</strong>”，而是子类在继承父类时，如果父类的显式构造器中有参数，子类要声明给出这个参数。这是一个关于&#x3D;&#x3D;继承&#x3D;&#x3D;的问题。</p><p>关键词：<code>abstract</code></p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回值类型 方法名(参数类型 参数名)&#123;</span><br><span class="line">    <span class="comment">/*修饰符：修饰符，这是可选的，告诉编译器如何调用该方法。定义了该方法的访问类型。</span></span><br><span class="line"><span class="comment">     *方法体：方法体包含具体的语句，定义该方法的功能。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ...</span><br><span class="line">    方法体</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用</p><blockquote><p>Java 支持两种调用方法的方式，根据方法是否返回值来选择。</p><ol><li>当程序调用一个方法时，程序的控制权交给了被调用的方法。当被调用方法的返回语句执行或者到达方法体闭括号时候交还控制权给程序。当方法&#x3D;&#x3D;返回一个值&#x3D;&#x3D;的时候，方法调用通常被当做一个值。</li><li>如果方法返回值是void，方法调用一定是&#x3D;&#x3D;一条语句&#x3D;&#x3D;。</li></ol></blockquote><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><blockquote><p>当一个对象被创建时候，构造方法用来初始化该对象。构造方法和它所在类的名字相同，但构造方法没有返回值。</p></blockquote><blockquote><p>当创建对象时，系统会自动调用构造方法</p><ol><li>没有自定义构造方法时，系统会调用默认构造方法</li><li>构造方法可以&#x3D;&#x3D;重载&#x3D;&#x3D;，不同的构造方法名字相同，参数列表不同，参数列表是其识别的依据、标志，类似不同人可能有相同的名字，但有不同的身份证号。</li><li>当自定义构造方法时，系统依据传入的&#x3D;&#x3D;参数类型、数量&#x3D;&#x3D;，自动匹配构造方法初始化对象</li></ol></blockquote><h3 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h3><blockquote><ul><li>变量的范围是程序中该变量可以被引用的部分。</li><li>方法内定义的变量被称为局部变量。</li><li>局部变量的作用范围从声明开始，直到包含它的块结束。</li><li>局部变量必须声明才可以使用。</li></ul></blockquote><p><img src="http://www.runoob.com/wp-content/uploads/2013/12/12-130Q1221013F0.jpg"></p><h3 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h3><blockquote><ul><li>一个类的两个方法拥有相同的名字，但是有不同的参数列表。Java编译器会根据方法签名判断哪个方法应该被调用。</li><li>方法重载可以让程序更清晰易读。执行密切相关任务的方法应该使用相同的名字。</li><li>重载的方法必须拥有不同的参数列表。你不能仅仅依据修饰符或者返回类型的不同来重载方法</li></ul></blockquote><p><strong>重载与覆写</strong></p><table><thead><tr><th align="center">区别</th><th align="center">重载(overload)</th><th align="center">覆写(override)</th></tr></thead><tbody><tr><td align="center"><strong>概念</strong></td><td align="center">方法名称相同，参数的类型和个数不同</td><td align="center">方法名称、返回值类型、参数的类型及个数完全相同</td></tr><tr><td align="center"><strong>范围</strong></td><td align="center">一个类</td><td align="center">继承关系</td></tr><tr><td align="center"><strong>限制</strong></td><td align="center">没有权限要求</td><td align="center">被覆写的方法不能拥有比父类更严格的访问控制权限</td></tr></tbody></table><blockquote><p>重载时最好保持方法返回类型一致</p></blockquote><h3 id="finalize-方法"><a href="#finalize-方法" class="headerlink" title="finalize() 方法"></a>finalize() 方法</h3><blockquote><p>Java 允许定义这样的方法，它在对象被垃圾收集器析构(回收)之前调用，这个方法叫做 finalize( )，它用来清除回收对象。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">finalize</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// 在这里终结代码</span></span><br><span class="line">&#125;<span class="comment">//关键字 protected 是一个限定符，它确保 finalize() 方法不会被该类以外的代码调用。</span></span><br></pre></td></tr></table></figure><h2 id="4-static和final"><a href="#4-static和final" class="headerlink" title="4 static和final"></a>4 static和final</h2><p><code>public static void main(String[] args) &#123;&#125;</code></p><p><code>main</code>为程序入口。</p><p><code>String[] args</code>为命令行参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommandLine</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123; </span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;args.length; i++)&#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;args[&quot;</span> + i + <span class="string">&quot;]: &quot;</span> + args[i]);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在命令行编译：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommandLine</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123; </span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;args.length; i++)&#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;args[&quot;</span> + i + <span class="string">&quot;]: &quot;</span> + args[i]);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">args[<span class="number">0</span>]: <span class="built_in">this</span></span><br><span class="line">args[<span class="number">1</span>]: is</span><br><span class="line">args[<span class="number">2</span>]: a</span><br><span class="line">args[<span class="number">3</span>]: command</span><br><span class="line">args[<span class="number">4</span>]: line</span><br><span class="line">args[<span class="number">5</span>]: <span class="number">200</span></span><br><span class="line">args[<span class="number">6</span>]: -<span class="number">100</span></span><br></pre></td></tr></table></figure><h3 id="static"><a href="#static" class="headerlink" title="static"></a><code>static</code></h3><blockquote><p>“static方法就是没有this的方法。在static方法内部不能调用非静态方法，反过来是可以的。而且可以在没有创建任何对象的前提下，仅仅通过类本身来调用static方法。这实际上正是static方法的主要用途。”</p></blockquote><p>&#x3D;&#x3D;方便在没有创建对象的情况下来进行调用（方法&#x2F;变量）。&#x3D;&#x3D;</p><p>被<code>static</code>关键字修饰的方法或者变量不需要依赖于对象来进行访问，只要类被加载了，就可以通过类名去进行访问。<br><code>static</code>可以用来修饰类的成员方法、类的成员变量，另外可以编写<code>static</code>代码块来优化程序性能。</p><p><strong>static方法</strong><br><img src="https://images0.cnblogs.com/i/288799/201406/201612439117678.jpg"><br>此时<code>MyObject</code>对象都没有，<code>str2</code>根本就不存在，所以就会产生矛盾了。同样对于方法也是一样，由于你无法预知在<code>print1</code>方法中是否访问了非静态成员变量，所以也&#x3D;&#x3D;禁止在静态成员方法中访问非静态成员方法&#x3D;&#x3D;。</p><p>而对于非静态成员方法，它访问静态成员方法&#x2F;变量显然是毫无限制的。</p><p>关于构造器是否是static方法可参考：<a href="https://blog.csdn.net/qq_17864929/article/details/48006835">构造器是静态方法吗？</a></p><p><strong>static变量</strong></p><blockquote><p>static变量也称作静态变量，静态变量和非静态变量的区别是：&#x3D;&#x3D;静态变量被所有的对象所共享，在内存中只有一个副本&#x3D;&#x3D;，它当且&#x3D;&#x3D;仅&#x3D;&#x3D;当在类&#x3D;&#x3D;初次加载&#x3D;&#x3D;时会被初始化。而非静态变量是对象所拥有的，在创建对象的时候被初始化，存在多个副本，各个对象拥有的副本互不影响。<br>static成员变量的初始化顺序按照定义的顺序进行初始化。</p></blockquote><p><strong>static代码块</strong></p><blockquote><p>static块可以置于类中的任何地方，类中可以有多个static块。在类初次被加载的时候，会按照static块的顺序来执行每个static块，&#x3D;&#x3D;并且只会执行一次&#x3D;&#x3D;。</p></blockquote><blockquote><p>因此，很多时候会将一些只需要进行一次的初始化操作都放在static代码块中进行。</p></blockquote><p><strong>static关键字的误区</strong></p><ol><li><p><code>static</code>关键字会改变类中成员的访问权限吗？<br>不会</p></li><li><p>能通过<code>this</code>访问静态成员变量吗？<br>能。静态成员变量虽然独立于对象，但是不代表不可以通过对象去访问，所有的静态方法和静态变量都可以通过对象访问（只要访问权限足够）。</p></li><li><p><code>static</code>能作用于局部变量么？<br>&#x3D;&#x3D;static是不允许用来修饰局部变量。&#x3D;&#x3D;</p></li></ol><p>这段代码的输出结果是什么？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;   </span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test static 1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;        </span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test static 2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test <span class="keyword">static</span> <span class="number">1</span></span><br><span class="line">test <span class="keyword">static</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p>虽然在<code>main</code>方法中没有任何语句，但是还是会输出。</p><p>执行<code>main</code>方法之前，必须先加载Test类，而在加载Test类的过程中就会执行<code>static</code>块。</p><p>另外，<code>static</code>块可以出现类中的任何地方（&#x3D;&#x3D;只要不是方法内部，记住，任何方法内部都不行&#x3D;&#x3D;），并且执行是按照<code>static</code>块的顺序执行的。</p><h3 id="final"><a href="#final" class="headerlink" title="final"></a><code>final</code></h3><p><strong>final 变量</strong><br><strong>final 方法</strong><br><strong>final 类</strong><br><strong>使用final关键字修饰一个变量时，是引用不能变，还是引用的对象不能变？</strong></p><h2 id="5-权限修饰符"><a href="#5-权限修饰符" class="headerlink" title="5 权限修饰符"></a>5 权限修饰符</h2><table><thead><tr><th align="center">作用域</th><th align="center">当前类</th><th align="center">同一package</th><th align="center">子孙类</th><th align="center">其他package</th></tr></thead><tbody><tr><td align="center"><code>public</code></td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center"><code>protected</code></td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">×</td></tr><tr><td align="center"><code>friendly</code></td><td align="center">√</td><td align="center">√</td><td align="center">×</td><td align="center">×</td></tr><tr><td align="center"><code>private</code></td><td align="center">√</td><td align="center">×</td><td align="center">×</td><td align="center">×</td></tr></tbody></table><p><code>friendly</code>为默认权限。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Html基本语法</title>
      <link href="/2018/12/07/Html%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
      <url>/2018/12/07/Html%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Html基础"><a href="#Html基础" class="headerlink" title="Html基础"></a>Html基础</h1><h2 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span>...<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span>...<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li><code>&lt;head&gt;</code>用于定义文档头部，它是所有头部元素的容器。头部元素有<code>&lt;title&gt;</code> <code>&lt;script&gt;</code> <code>&lt;style&gt;</code> <code>&lt;link&gt;</code> <code>&lt;mate&gt;</code>等标签。</li><li><code>&lt;body&gt;&lt;/body&gt;</code>之间是网页的主要内容，如 <code>&lt;h1&gt;</code> <code>&lt;p&gt;</code> <code>&lt;a&gt;</code> <code>&lt;img&gt;</code>等网页内容标签，这里的标签是将在浏览器中显示出来的。</li></ol><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">1.<span class="comment">&lt;!--注释--&gt;</span></span><br><span class="line">2.<span class="tag">&lt;<span class="name">em</span>&gt;</span>强调文本 斜体<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>强调文本 粗体<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">3.<span class="tag">&lt;<span class="name">q</span>&gt;</span>引用文本 显示效果为加上&quot; &quot;<span class="tag">&lt;/<span class="name">q</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span>长文本引用 显示效果为前后缩进<span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br><span class="line">4.<span class="tag">&lt;<span class="name">span</span>&gt;</span>标记文本 被标记的文本可以用css和js进行操作<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">5.|html4.01 |xhtml1.0 | 作 用  |</span><br><span class="line">| <span class="tag">&lt;<span class="name">br</span>&gt;</span>    | <span class="tag">&lt;<span class="name">br</span>/&gt;</span>   | 换行符 |</span><br><span class="line">| <span class="tag">&lt;<span class="name">hr</span>&gt;</span>    | <span class="tag">&lt;<span class="name">hr</span>/&gt;</span>   | 水平线 |</span><br><span class="line">一般用xhtml1.0版的</span><br><span class="line">6. ；为空格</span><br><span class="line">7.<span class="tag">&lt;<span class="name">address</span>&gt;</span>地址信息 默认为斜体<span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">code</span>&gt;</span>代码片段<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span>代码块 即保留空格和换行符的格式化文本<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line">8.<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>无序列表1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>无序列表2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">9.<span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>有序列表1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>有序列表2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">10.<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;id以区分不同的块&quot;</span>&gt;</span>独立的逻辑部分，会在末尾添加一个换行符<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">11.<span class="tag">&lt;<span class="name">table</span> <span class="attr">summary</span>=<span class="string">&quot;表格简介文本&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">caption</span>&gt;</span>表格标题文本<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span><span class="comment">&lt;!--按结构一块块的显示，不在等整个表格加载完后显示--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="comment">&lt;!--表格的一行，所以有几对tr 表格就有几行--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>表头1<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>表头2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>表头3<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>数据1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>数据2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>数据3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>数据1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>数据2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>数据3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">12. <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;目标网址&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">title</span>=<span class="string">&quot;鼠标滑过显示的文本&quot;</span>&gt;</span>链接显示的文本<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- target=&quot;_blank&quot;是在新窗口打开的作用 --&gt;</span></span><br><span class="line">13. <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;图片地址&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;下载失败时的替换文本&quot;</span> <span class="attr">title</span>=<span class="string">&quot;提示文本&quot;</span> &gt;</span></span><br><span class="line">14.表单</span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;传送方式get post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;服务器文件&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        1.<span class="tag">&lt;<span class="name">form</span>&gt;</span>成对出现，以<span class="tag">&lt;/<span class="name">form</span>&gt;</span>结束</span><br><span class="line">        2.action ：输入的数据被传送到的地方</span><br><span class="line">        3.method ：数据传送的方式(get/post)</span><br><span class="line">        4.以下均出现在表单里</span><br><span class="line">选框：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span>   <span class="attr">type</span>=<span class="string">&quot;radio/checkbox&quot;</span>   <span class="attr">value</span>=<span class="string">&quot;值&quot;</span>    <span class="attr">name</span>=<span class="string">&quot;名称&quot;</span>   <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>/&gt;</span></span><br><span class="line">        1.type: &quot;radio&quot;为单选框，&quot;checkbox&quot;为复选框</span><br><span class="line">        2.value：提交数据到服务器的值（后台程序使用）</span><br><span class="line">        3.name：为控件命名，以备后台程序 ASP、PHP 使用[同一组的单选按钮，name 取值一定要一致]</span><br><span class="line">        4.checked：当设置 checked=&quot;checked&quot; 时，该选项被默认选中</span><br><span class="line">下拉列表：</span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>爱好:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">multiple</span>=<span class="string">&quot;multiple&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- multiple=&quot;multiple&quot;为多选状态 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;向服务器提交的值1&quot;</span> <span class="attr">selected</span>=<span class="string">&quot;selected&quot;</span>&gt;</span>显示的值1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- selected=&quot;selected&quot;为默认选中的选项 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;向服务器提交的值2&quot;</span>&gt;</span>显示的值2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">提交按钮：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> /&gt;</span></span><br><span class="line">        - type ：为submit时，才有提交作用</span><br><span class="line">                 为reset时，为重置按钮</span><br><span class="line">label标签：</span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;male&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">id</span>=<span class="string">&quot;male&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;female&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">id</span>=<span class="string">&quot;female&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        - 语法 ：<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;控件id名称&quot;</span>&gt;</span>选中这段文本时会选中id名相同的控件<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Html </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
